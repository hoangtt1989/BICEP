// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// closed_beta_lm_AL_cpp
Eigen::VectorXd closed_beta_lm_AL_cpp(const Eigen::Map<Eigen::VectorXd>& wts, const Eigen::Map<Eigen::VectorXd>& gamma, const Eigen::Map<Eigen::VectorXd>& y, const Eigen::Map<Eigen::MatrixXd>& X, const Eigen::Map<Eigen::MatrixXd>& F_reparam, const Eigen::Map<Eigen::VectorXd>& s_hat_reparam, const double& dual_step);
RcppExport SEXP _BICEP_closed_beta_lm_AL_cpp(SEXP wtsSEXP, SEXP gammaSEXP, SEXP ySEXP, SEXP XSEXP, SEXP F_reparamSEXP, SEXP s_hat_reparamSEXP, SEXP dual_stepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type wts(wtsSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type F_reparam(F_reparamSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type s_hat_reparam(s_hat_reparamSEXP);
    Rcpp::traits::input_parameter< const double& >::type dual_step(dual_stepSEXP);
    rcpp_result_gen = Rcpp::wrap(closed_beta_lm_AL_cpp(wts, gamma, y, X, F_reparam, s_hat_reparam, dual_step));
    return rcpp_result_gen;
END_RCPP
}
// mirror_descent_REL
List mirror_descent_REL(const Eigen::Map<Eigen::VectorXd>& wts, const Eigen::Map<Eigen::VectorXd>& delta, const Eigen::Map<Eigen::VectorXd>& gamma, const Eigen::Map<Eigen::MatrixXd>& Z_mat, const double& dual_step, double mirror_step, const int& maxit, const double& mirror_eps, const std::string& tol_type, const bool& vary_step, const bool& line_search, const double& ls_eps, const int& ls_maxit, const double& ls_beta);
RcppExport SEXP _BICEP_mirror_descent_REL(SEXP wtsSEXP, SEXP deltaSEXP, SEXP gammaSEXP, SEXP Z_matSEXP, SEXP dual_stepSEXP, SEXP mirror_stepSEXP, SEXP maxitSEXP, SEXP mirror_epsSEXP, SEXP tol_typeSEXP, SEXP vary_stepSEXP, SEXP line_searchSEXP, SEXP ls_epsSEXP, SEXP ls_maxitSEXP, SEXP ls_betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type wts(wtsSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type Z_mat(Z_matSEXP);
    Rcpp::traits::input_parameter< const double& >::type dual_step(dual_stepSEXP);
    Rcpp::traits::input_parameter< double >::type mirror_step(mirror_stepSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const double& >::type mirror_eps(mirror_epsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type tol_type(tol_typeSEXP);
    Rcpp::traits::input_parameter< const bool& >::type vary_step(vary_stepSEXP);
    Rcpp::traits::input_parameter< const bool& >::type line_search(line_searchSEXP);
    Rcpp::traits::input_parameter< const double& >::type ls_eps(ls_epsSEXP);
    Rcpp::traits::input_parameter< const int& >::type ls_maxit(ls_maxitSEXP);
    Rcpp::traits::input_parameter< const double& >::type ls_beta(ls_betaSEXP);
    rcpp_result_gen = Rcpp::wrap(mirror_descent_REL(wts, delta, gamma, Z_mat, dual_step, mirror_step, maxit, mirror_eps, tol_type, vary_step, line_search, ls_eps, ls_maxit, ls_beta));
    return rcpp_result_gen;
END_RCPP
}
// prox_grad_REL
List prox_grad_REL(const Eigen::Map<Eigen::VectorXd>& wts_new, const Eigen::Map<Eigen::MatrixXd>& Z_mat, const Eigen::Map<Eigen::VectorXd>& gamma_curr, const double& dual_step, const Eigen::Map<Eigen::VectorXd>& delta_inp, const int& q, double delta_step, const int& maxit, const double& outlier_eps, const bool& accelerate, const bool& line_search, const double& ls_eps, const int& ls_maxit, const double& ls_beta);
RcppExport SEXP _BICEP_prox_grad_REL(SEXP wts_newSEXP, SEXP Z_matSEXP, SEXP gamma_currSEXP, SEXP dual_stepSEXP, SEXP delta_inpSEXP, SEXP qSEXP, SEXP delta_stepSEXP, SEXP maxitSEXP, SEXP outlier_epsSEXP, SEXP accelerateSEXP, SEXP line_searchSEXP, SEXP ls_epsSEXP, SEXP ls_maxitSEXP, SEXP ls_betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type wts_new(wts_newSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type Z_mat(Z_matSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type gamma_curr(gamma_currSEXP);
    Rcpp::traits::input_parameter< const double& >::type dual_step(dual_stepSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type delta_inp(delta_inpSEXP);
    Rcpp::traits::input_parameter< const int& >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type delta_step(delta_stepSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const double& >::type outlier_eps(outlier_epsSEXP);
    Rcpp::traits::input_parameter< const bool& >::type accelerate(accelerateSEXP);
    Rcpp::traits::input_parameter< const bool& >::type line_search(line_searchSEXP);
    Rcpp::traits::input_parameter< const double& >::type ls_eps(ls_epsSEXP);
    Rcpp::traits::input_parameter< const int& >::type ls_maxit(ls_maxitSEXP);
    Rcpp::traits::input_parameter< const double& >::type ls_beta(ls_betaSEXP);
    rcpp_result_gen = Rcpp::wrap(prox_grad_REL(wts_new, Z_mat, gamma_curr, dual_step, delta_inp, q, delta_step, maxit, outlier_eps, accelerate, line_search, ls_eps, ls_maxit, ls_beta));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BICEP_closed_beta_lm_AL_cpp", (DL_FUNC) &_BICEP_closed_beta_lm_AL_cpp, 7},
    {"_BICEP_mirror_descent_REL", (DL_FUNC) &_BICEP_mirror_descent_REL, 14},
    {"_BICEP_prox_grad_REL", (DL_FUNC) &_BICEP_prox_grad_REL, 14},
    {NULL, NULL, 0}
};

RcppExport void R_init_BICEP(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
